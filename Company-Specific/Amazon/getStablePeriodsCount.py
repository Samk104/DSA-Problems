#***************************************************************************************************************************************************************************************************************************#
                                                    #Problem Statement
#***************************************************************************************************************************************************************************************************************************#

# A team of financial analysts at Amazon closely monitors revenue generated by a newly launched product. They classify a period of one or more consecutive days as a stable-growth period if the revenue generated by the product takes no more than k distinct values over that period.

# Given an array revenues of size n, that represents the revenues generated by the new product on n consecutive days, and an integer k, determine the total number of stable growth periods over the n days. Since the answer can be large, return it modulo (10^9 + 7).

# Function Description

# Complete the function getStablePeriodsCount in the editor.

# getStablePeriodsCount has the following parameters:

# int revenues[n]: the revenues generated by the new product over n days
# int k: the maximum number of distinct values in a stable growth period
# Returns

# int: the number of stable growth periods of the product over n days, modulo (10^9 + 7)

# Example 1:

# Input:  revenues = [1, 2, 1], k = 1
# Output: 3 
# Explanation:


# There are 3 periods with k=1 or fewer distinct values. The number of stable growth periods is 3.
# https://www.fastprep.io/_next/static/media/getStablePeriodsCount.af666f5e.png/

  



      
# Example 2:

# Input:  revenues = [2, -3, 2, -3], k = 2
# Output: 10 
# Explanation:


# Any contiguous period of 1 or more days has 2 or fewer distinct values, thus all 10 subarrays represent a period of stable growth ðŸ“ˆðŸ“ˆ
      
# Constraints:
# 1 â‰¤ n â‰¤ 10^5
# 1 â‰¤ k â‰¤ n
# -10^9 â‰¤ revenues[i] â‰¤ 10^9

#***************************************************************************************************************************************************************************************************************************#

from typing import List

class Solution:
  def getStablePeriodsCount(self, revenues: List[int], k: int) -> int:

    freq = {}

    res = 0
    l = 0
    MOD = 10**9 + 7

    for r in range(len(revenues)):
      freq[revenues[r]] = freq.get(revenues[r], 0) + 1

      #If number of distinct elements become greater than k
      while k<len(freq):
        #Remove the leftmost element
        freq[revenues[l]] -= 1
        if freq[revenues[l]] == 0:
          del freq[revenues[l]]
        l += 1


      res += (r-l+1)
      res %= MOD

    return res

if __name__ == "__main__":
    revenues = [1, 2, 1]
    k = 1
    sol = Solution()
    print(sol.getStablePeriodsCount(revenues, k))
    print(sol.getStablePeriodsCount([2,-3,2,-3], 2))
      
  
